/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <38 39>;
        };

        layer_3 {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp TAB  &kp Q  &kp W     &kp E  &kp R      &kp T      &kp Y  &kp U      &kp I    &kp O          &kp P  &kp BSPC
&kp LCTRL  &kp A  &kp S     &kp D  &kp F      &kp G      &kp H  &kp J      &kp K    &kp L  &kp SEMICOLON   &kp SQT
&kp LSHFT  &kp Z  &kp X     &kp C  &kp V      &kp B      &kp N  &kp M  &kp COMMA  &kp DOT       &kp FSLH   &kp ESC
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2   &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp TAB      &kp N1  &kp N2            &kp N3       &kp N4      &kp N5             &kp N6           &kp N7           &kp N8           &kp N9  &kp N0  &kp BSPC
   &trans      &trans  &trans     &kp LG(SPACE)  &kp LS(TAB)     &kp TAB           &kp LEFT         &kp DOWN           &kp UP        &kp RIGHT  &trans    &trans
&kp LSHFT  &bt BT_CLR  &trans            &trans   &bt BT_PRV  &bt BT_NXT    &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF  &trans    &trans
                               &kp LEFT_COMMAND       &trans   &kp SPACE            &kp RET           &trans         &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp TAB  &kp EXCL    &kp AT          &kp HASH           &kp DLLR              &kp PRCNT    &kp CARET  &kp KP_MULTIPLY  &kp MINUS  &kp UNDERSCORE    &trans  &kp BSPC
&kp LCTRL    &trans  &kp AMPS    &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS       &trans        &kp EQUAL  &kp GRAVE       &kp SLASH  &kp PIPE    &trans
&kp LSHFT    &trans    &trans   &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS       &trans         &kp PLUS     &trans          &trans    &trans    &trans
                               &kp LEFT_COMMAND             &trans              &kp SPACE      &kp RET           &trans   &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP      &kp C_PLAY_PAUSE            &kp C_NEXT    &kp F1  &kp F4  &kp F7  &trans  &trans  &trans
&trans  &kp C_BRI_DN  &kp C_BRI_UP        &trans  &kp LG(LS(NUMBER_4))  &kp LG(LS(NUMBER_5))    &kp F2  &kp F5  &kp F8  &trans  &trans  &trans
&trans        &trans        &trans        &trans                &trans                &trans    &kp F3  &kp F6  &kp F9  &trans  &trans  &trans
                                          &trans                &trans                &trans    &trans  &trans  &trans
            >;
        };
    };
};
